import type { RelayNode } from "@waku/interfaces";
import {
    FormControl,
    makeStyles,
    Select,
    MenuItem,
    Button,
    InputLabel
} from "@material-ui/core";
import { PublicKeyMessageObj } from "../waku";
import { TypedDataSigner } from "@ethersproject/abstract-signer";
import { sign } from "crypto";
import {ChangeEvent, useState, Dispatch, SetStateAction} from "react";
import { Web3Provider } from "@ethersproject/providers";
import { Block, TransactionResponse } from "@ethersproject/abstract-provider";
import { keccak256 } from "ethers/lib/utils";
import { bytesToHex, hexToBytes } from "@waku/utils/bytes";
import { PublicKeyMessage } from "../messaging/wire";
import { equals } from "uint8arrays/equals";
import { decryptCBC, decryptWithPrivateKey, importAESKeyUint8ArrayToCryptoKey, importPrivateKeyUint8ArrayToCryptoKey, importPublicKeyUint8ArrayToCryptoKey, validatePublicKeyMessage } from "../wakuCrypto";
import { AddRounded } from "@material-ui/icons";

class AsyncQueue {
  private queue: { task: () => Promise<number>; blockNum: number }[] = [];
  private processing = false;

  constructor() {}

  enqueue(task: () => Promise<number>, blockNum: number) {
    this.queue.push({ task, blockNum });
    this.processQueue();
  }

  private async processQueue() {
    if (this.processing) {
      return;
    }
    this.processing = true;

    this.queue.sort((a, b) => a.blockNum - b.blockNum);
    while (this.queue.length > 0) {
      const { task } = this.queue.shift()!;
      await task();
    }
    this.processing = false;
  }
}



var receiving = false;
var secretMap: Map<number, number> = new Map();
var flag: string[] = [];
var myPrivateKey: Uint8Array = new Uint8Array(0);

const blockQueue = new AsyncQueue();

async function handlePKMwithNoEncrypt(encrypted: Uint8Array, myAddress: string, setter: Dispatch<SetStateAction<Map<string, PublicKeyMessageObj>>>): Promise<boolean> {
  console.log("start handlePKMwithNoEncrypt");
  const key = await importAESKeyUint8ArrayToCryptoKey(hexToBytes(myAddress.slice(2, 34)));
  const iv = hexToBytes(myAddress.slice(-33, -1));
  const payload = await decryptCBC(key, iv, encrypted);
  console.log(payload);
  const publicKeyMsg = PublicKeyMessage.decode(payload);
  if (!publicKeyMsg) return Promise.reject(false);
  if (!publicKeyMsg.ethAddress) return Promise.reject(false);
  if (myAddress && equals(publicKeyMsg.ethAddress, hexToBytes(myAddress)))
    return Promise.reject(false);
  const res = validatePublicKeyMessage(publicKeyMsg);
  console.log("Is Public Key Message valid?", res);

  if (res) {
    setter((prevPks: Map<string, PublicKeyMessageObj>) => {
      prevPks.set(
        bytesToHex(publicKeyMsg.ethAddress).toLowerCase(),
        {
          encryptionPK: publicKeyMsg.encryptionPublicKey,
          kdSalt: publicKeyMsg.randomSeed,
          willUseAddr: publicKeyMsg.willUseAddr
        }
      );
      return new Map(prevPks);
    });
  }
  return Promise.resolve(true);
}

async function handlePKMwithPKEncrypt(payload: Uint8Array, myAddress: string, setter: Dispatch<SetStateAction<Map<string, PublicKeyMessageObj>>>, privateKey: Uint8Array): Promise<boolean> {
  console.log("start handlePKMwithPKEncrypt");
  console.log(payload);

  let offset = 0;
  const blockSize = 256;
  let decryptedBlocks = [];
  while (offset < payload.length) {
    const block = new Uint8Array(payload.slice(offset, offset + blockSize));
    const p = await importPrivateKeyUint8ArrayToCryptoKey(privateKey);
    const decrypted = await decryptWithPrivateKey(p, block);
    decryptedBlocks.push(decrypted);
    offset += blockSize;
  }
  const tot = decryptedBlocks.length*0xb0;
  const decryptedArray = new Uint8Array(tot);
  offset = 0;
  for( const value of decryptedBlocks){
    decryptedArray.set(value, offset);
    offset+=0xb0;
  }
  
  const publicKeyMsg = PublicKeyMessage.decode(decryptedArray);
  if (!publicKeyMsg) return Promise.reject(false);
  if (!publicKeyMsg.ethAddress) return Promise.reject(false);
  if (myAddress && equals(publicKeyMsg.ethAddress, hexToBytes(myAddress)))
    return Promise.reject(false);
  const res = validatePublicKeyMessage(publicKeyMsg);
  console.log("Is Public Key Message valid?", res);

  if (res) {
    setter((prevPks: Map<string, PublicKeyMessageObj>) => {
      prevPks.set(
        bytesToHex(publicKeyMsg.ethAddress).toLowerCase(),
        {
          encryptionPK: publicKeyMsg.encryptionPublicKey,
          kdSalt: publicKeyMsg.randomSeed,
          willUseAddr: publicKeyMsg.willUseAddr
        }
      );
      return new Map(prevPks);
    });
  }
  return Promise.resolve(true);
}

async function processBlockNumber(blockNum: number, provider: Web3Provider,
  setter: Dispatch<SetStateAction<Map<string, PublicKeyMessageObj>>>,
  myAddr: string, broadCastAddr: string, privateKey: Uint8Array): Promise<number>{
  
  const block = await provider.getBlock(blockNum);
  // console.log('start processing ', blockNum);
  for (const transactionHash of block.transactions){
    const transaction = await provider.getTransaction(transactionHash);
    if (!transaction)  continue;
    if (!transaction.to) continue;
    if (transaction.to.toLowerCase() === broadCastAddr.toLowerCase()){
      try{
        console.log('nonce: ', transaction.nonce);
        const data = transaction.data;
        const keyData = hexToBytes(data.slice(-2))[0];
        const last2bit = keyData&0b11;
        if (last2bit === 0b11 && receiving){
          receiving = false;
          const secret: number[] = [];
          console.log("accept down");
          console.log(secretMap);
          for(let i = 1; i <= secretMap.size; i+=8){
            var oneByte = 0;
            for(let j = i; j < i+8; j++){
              const bit = secretMap.get(j);
              if (bit === undefined){
                console.log("not key: ", j);
                return Promise.resolve(-1);
              }
              oneByte += bit<<((j-1)%8);
            }
            secret.push(oneByte);
          }
          console.log(secret);
          handlePKMwithNoEncrypt(Uint8Array.from(secret), myAddr, setter)
            .then(() => {
              console.log("Successfully decrypt with no encrypt");
            })
            .catch((error) => {
              console.log("Fail to decrypt with no encrypt: ", error);
              handlePKMwithPKEncrypt(Uint8Array.from(secret), myAddr, setter, privateKey)
              .then(() => {
                console.log("Successfully decrypt with privateKey");
              })
              .catch((error) => {
                console.log("Fail to decrypt with privateKey:", error);
              });
            });
          secretMap.clear();
        }
        if (receiving){
          secretMap.set(transaction.nonce, last2bit&0b1);
          console.log(secretMap);
        }
        if (last2bit === 0b00 && !receiving){
          console.log("start accepting");
          receiving = true;
          secretMap.clear();
        }
      }
      catch{
        console.log("something err");
      }
    }
  }
  // console.log("block ", blockNum, "down");
  return Promise.resolve(blockNum);
}

export async function processBlock(
  myAddr: string,
  provider: Web3Provider,
  privateKey: Uint8Array,
  setter: Dispatch<SetStateAction<Map<string, PublicKeyMessageObj>>>,
  blockNumber: number | undefined) {
  
  if (!blockNumber) return;
  if (!myAddr) return;
  if (!privateKey) return;
  if (!myPrivateKey)
    myPrivateKey = new Uint8Array(myPrivateKey);
  if (flag.indexOf(myAddr) === -1){
    if (myAddr.toLowerCase() === "0x9bca44ab3e2ae6c5b9b11f88bd217d79ab16d00f"){
        const a = {
          "0": 170,
          "1": 148,
          "2": 159,
          "3": 226,
          "4": 64,
          "5": 255,
          "6": 217,
          "7": 53,
          "8": 119,
          "9": 188,
          "10": 94,
          "11": 242,
          "12": 217,
          "13": 81,
          "14": 31,
          "15": 107,
          "16": 64,
          "17": 12,
          "18": 209,
          "19": 200,
          "20": 163,
          "21": 75,
          "22": 244,
          "23": 205,
          "24": 129,
          "25": 6,
          "26": 184,
          "27": 121,
          "28": 245,
          "29": 188,
          "30": 18,
          "31": 220,
          "32": 251,
          "33": 10,
          "34": 225,
          "35": 214,
          "36": 53,
          "37": 167,
          "38": 86,
          "39": 214,
          "40": 72,
          "41": 240,
          "42": 126,
          "43": 92,
          "44": 74,
          "45": 87,
          "46": 7,
          "47": 233,
          "48": 21,
          "49": 173,
          "50": 140,
          "51": 230,
          "52": 24,
          "53": 174,
          "54": 169,
          "55": 5,
          "56": 215,
          "57": 21,
          "58": 76,
          "59": 9,
          "60": 167,
          "61": 83,
          "62": 155,
          "63": 17,
          "64": 202,
          "65": 77,
          "66": 172,
          "67": 180,
          "68": 161,
          "69": 25,
          "70": 100,
          "71": 44,
          "72": 148,
          "73": 87,
          "74": 74,
          "75": 239,
          "76": 153,
          "77": 115,
          "78": 180,
          "79": 15,
          "80": 44,
          "81": 190,
          "82": 62,
          "83": 19,
          "84": 119,
          "85": 128,
          "86": 185,
          "87": 54,
          "88": 118,
          "89": 160,
          "90": 239,
          "91": 152,
          "92": 195,
          "93": 58,
          "94": 99,
          "95": 16,
          "96": 41,
          "97": 252,
          "98": 151,
          "99": 37,
          "100": 59,
          "101": 14,
          "102": 83,
          "103": 184,
          "104": 222,
          "105": 31,
          "106": 249,
          "107": 137,
          "108": 189,
          "109": 110,
          "110": 147,
          "111": 171,
          "112": 41,
          "113": 32,
          "114": 127,
          "115": 168,
          "116": 51,
          "117": 66,
          "118": 79,
          "119": 25,
          "120": 196,
          "121": 44,
          "122": 213,
          "123": 192,
          "124": 82,
          "125": 96,
          "126": 1,
          "127": 88,
          "128": 5,
          "129": 83,
          "130": 243,
          "131": 220,
          "132": 250,
          "133": 77,
          "134": 82,
          "135": 251,
          "136": 241,
          "137": 106,
          "138": 251,
          "139": 16,
          "140": 72,
          "141": 191,
          "142": 90,
          "143": 180,
          "144": 50,
          "145": 222,
          "146": 125,
          "147": 118,
          "148": 16,
          "149": 237,
          "150": 8,
          "151": 236,
          "152": 26,
          "153": 10,
          "154": 210,
          "155": 227,
          "156": 67,
          "157": 23,
          "158": 0,
          "159": 227,
          "160": 129,
          "161": 183,
          "162": 145,
          "163": 120,
          "164": 73,
          "165": 4,
          "166": 220,
          "167": 32,
          "168": 70,
          "169": 183,
          "170": 220,
          "171": 176,
          "172": 194,
          "173": 185,
          "174": 255,
          "175": 97,
          "176": 141,
          "177": 92,
          "178": 116,
          "179": 184,
          "180": 67,
          "181": 59,
          "182": 6,
          "183": 239,
          "184": 56,
          "185": 57,
          "186": 26,
          "187": 168,
          "188": 41,
          "189": 78,
          "190": 135,
          "191": 106,
          "192": 179,
          "193": 200,
          "194": 251,
          "195": 168,
          "196": 105,
          "197": 129,
          "198": 8,
          "199": 114,
          "200": 41,
          "201": 240,
          "202": 6,
          "203": 178,
          "204": 60,
          "205": 53,
          "206": 147,
          "207": 141,
          "208": 11,
          "209": 215,
          "210": 81,
          "211": 1,
          "212": 202,
          "213": 159,
          "214": 169,
          "215": 254,
          "216": 118,
          "217": 123,
          "218": 63,
          "219": 205,
          "220": 156,
          "221": 72,
          "222": 178,
          "223": 149,
          "224": 228,
          "225": 142,
          "226": 13,
          "227": 251,
          "228": 42,
          "229": 135,
          "230": 242,
          "231": 222,
          "232": 36,
          "233": 255,
          "234": 238,
          "235": 96,
          "236": 179,
          "237": 105,
          "238": 98,
          "239": 131,
          "240": 100,
          "241": 176,
          "242": 133,
          "243": 49,
          "244": 166,
          "245": 127,
          "246": 5,
          "247": 93,
          "248": 208,
          "249": 183,
          "250": 58,
          "251": 60,
          "252": 239,
          "253": 232,
          "254": 140,
          "255": 252,
          "256": 162,
          "257": 49,
          "258": 36,
          "259": 48,
          "260": 160,
          "261": 246,
          "262": 203,
          "263": 86,
          "264": 72,
          "265": 68,
          "266": 182,
          "267": 184,
          "268": 136,
          "269": 142,
          "270": 139,
          "271": 31,
          "272": 28,
          "273": 186,
          "274": 242,
          "275": 135,
          "276": 193,
          "277": 187,
          "278": 37,
          "279": 186,
          "280": 180,
          "281": 119,
          "282": 40,
          "283": 245,
          "284": 12,
          "285": 120,
          "286": 242,
          "287": 232,
          "288": 60,
          "289": 70,
          "290": 196,
          "291": 136,
          "292": 153,
          "293": 226,
          "294": 24,
          "295": 254,
          "296": 214,
          "297": 146,
          "298": 243,
          "299": 109,
          "300": 62,
          "301": 5,
          "302": 54,
          "303": 202,
          "304": 2,
          "305": 3,
          "306": 79,
          "307": 12,
          "308": 198,
          "309": 136,
          "310": 122,
          "311": 87,
          "312": 165,
          "313": 144,
          "314": 200,
          "315": 70,
          "316": 114,
          "317": 63,
          "318": 139,
          "319": 86,
          "320": 170,
          "321": 235,
          "322": 204,
          "323": 148,
          "324": 219,
          "325": 23,
          "326": 157,
          "327": 218,
          "328": 13,
          "329": 189,
          "330": 104,
          "331": 197,
          "332": 143,
          "333": 9,
          "334": 239,
          "335": 18,
          "336": 52,
          "337": 126,
          "338": 161,
          "339": 56,
          "340": 142,
          "341": 20,
          "342": 108,
          "343": 118,
          "344": 94,
          "345": 180,
          "346": 158,
          "347": 188,
          "348": 15,
          "349": 242,
          "350": 57,
          "351": 42,
          "352": 148,
          "353": 214,
          "354": 132,
          "355": 23,
          "356": 198,
          "357": 110,
          "358": 29,
          "359": 132,
          "360": 28,
          "361": 143,
          "362": 69,
          "363": 184,
          "364": 66,
          "365": 10,
          "366": 119,
          "367": 183,
          "368": 198,
          "369": 116,
          "370": 244,
          "371": 131,
          "372": 240,
          "373": 184,
          "374": 178,
          "375": 160,
          "376": 46,
          "377": 2,
          "378": 177,
          "379": 62,
          "380": 111,
          "381": 234,
          "382": 201,
          "383": 48,
          "384": 0,
          "385": 161,
          "386": 137,
          "387": 156,
          "388": 64,
          "389": 137,
          "390": 167,
          "391": 215,
          "392": 168,
          "393": 40,
          "394": 107,
          "395": 45,
          "396": 98,
          "397": 242,
          "398": 119,
          "399": 224,
          "400": 86,
          "401": 181,
          "402": 245,
          "403": 206,
          "404": 206,
          "405": 176,
          "406": 184,
          "407": 255,
          "408": 204,
          "409": 217,
          "410": 15,
          "411": 217,
          "412": 140,
          "413": 8,
          "414": 209,
          "415": 98,
          "416": 47,
          "417": 162,
          "418": 50,
          "419": 46,
          "420": 178,
          "421": 181,
          "422": 12,
          "423": 37,
          "424": 199,
          "425": 247,
          "426": 54,
          "427": 42,
          "428": 39,
          "429": 192,
          "430": 46,
          "431": 216,
          "432": 182,
          "433": 141,
          "434": 176,
          "435": 12,
          "436": 200,
          "437": 240,
          "438": 72,
          "439": 138,
          "440": 43,
          "441": 162,
          "442": 70,
          "443": 231,
          "444": 63,
          "445": 133,
          "446": 107,
          "447": 175
      };
      const secret: number[] = [];
      for (const key in a) {
        const value: number = a[key as keyof typeof a];
        secret.push(value);
      }
      console.log(secret);
      const encrypted = Uint8Array.from(secret);
      const key = await importAESKeyUint8ArrayToCryptoKey(hexToBytes(myAddr.slice(2, 34)));
      const iv = hexToBytes(myAddr.slice(-33, -1));
      const payload = await decryptCBC(key, iv, encrypted);

      const publicKeyMsg = PublicKeyMessage.decode(payload);
      if (!publicKeyMsg) return;
      if (!publicKeyMsg.ethAddress) return;
      if (myAddr && equals(publicKeyMsg.ethAddress, hexToBytes(myAddr)))
        return;
      const res = validatePublicKeyMessage(publicKeyMsg);
      console.log("Is Public Key Message valid?", res);

      if (res) {
        setter((prevPks: Map<string, PublicKeyMessageObj>) => {
          prevPks.set(
            bytesToHex(publicKeyMsg.ethAddress),
            {
              encryptionPK: publicKeyMsg.encryptionPublicKey,
              kdSalt: publicKeyMsg.randomSeed,
              willUseAddr: publicKeyMsg.willUseAddr
            }
          );
          return new Map(prevPks);
        });
      }
    }
    if (myAddr.toLowerCase() === "0x862570693111db350a6376c095b7e57c7650e78d"){
      const a = {
        "0": 26,
        "1": 179,
        "2": 196,
        "3": 190,
        "4": 11,
        "5": 160,
        "6": 246,
        "7": 215,
        "8": 76,
        "9": 164,
        "10": 193,
        "11": 146,
        "12": 121,
        "13": 161,
        "14": 52,
        "15": 208,
        "16": 164,
        "17": 60,
        "18": 3,
        "19": 18,
        "20": 219,
        "21": 102,
        "22": 248,
        "23": 213,
        "24": 80,
        "25": 197,
        "26": 174,
        "27": 203,
        "28": 106,
        "29": 99,
        "30": 94,
        "31": 16,
        "32": 154,
        "33": 119,
        "34": 90,
        "35": 247,
        "36": 131,
        "37": 131,
        "38": 68,
        "39": 38,
        "40": 6,
        "41": 214,
        "42": 131,
        "43": 82,
        "44": 86,
        "45": 16,
        "46": 80,
        "47": 212,
        "48": 45,
        "49": 41,
        "50": 88,
        "51": 43,
        "52": 54,
        "53": 121,
        "54": 14,
        "55": 176,
        "56": 168,
        "57": 59,
        "58": 203,
        "59": 225,
        "60": 139,
        "61": 218,
        "62": 223,
        "63": 26,
        "64": 8,
        "65": 159,
        "66": 19,
        "67": 43,
        "68": 44,
        "69": 183,
        "70": 145,
        "71": 17,
        "72": 17,
        "73": 143,
        "74": 248,
        "75": 132,
        "76": 161,
        "77": 189,
        "78": 124,
        "79": 8,
        "80": 173,
        "81": 191,
        "82": 130,
        "83": 24,
        "84": 195,
        "85": 142,
        "86": 172,
        "87": 52,
        "88": 1,
        "89": 170,
        "90": 89,
        "91": 83,
        "92": 218,
        "93": 244,
        "94": 155,
        "95": 102,
        "96": 208,
        "97": 67,
        "98": 145,
        "99": 2,
        "100": 236,
        "101": 144,
        "102": 108,
        "103": 7,
        "104": 74,
        "105": 245,
        "106": 33,
        "107": 220,
        "108": 51,
        "109": 237,
        "110": 57,
        "111": 75,
        "112": 234,
        "113": 90,
        "114": 66,
        "115": 128,
        "116": 4,
        "117": 194,
        "118": 134,
        "119": 58,
        "120": 122,
        "121": 3,
        "122": 152,
        "123": 241,
        "124": 214,
        "125": 61,
        "126": 175,
        "127": 200,
        "128": 54,
        "129": 99,
        "130": 195,
        "131": 83,
        "132": 128,
        "133": 56,
        "134": 149,
        "135": 188,
        "136": 207,
        "137": 108,
        "138": 86,
        "139": 84,
        "140": 227,
        "141": 169,
        "142": 16,
        "143": 166,
        "144": 9,
        "145": 98,
        "146": 245,
        "147": 117,
        "148": 121,
        "149": 8,
        "150": 91,
        "151": 226,
        "152": 177,
        "153": 193,
        "154": 140,
        "155": 245,
        "156": 28,
        "157": 226,
        "158": 71,
        "159": 68,
        "160": 67,
        "161": 24,
        "162": 233,
        "163": 235,
        "164": 35,
        "165": 183,
        "166": 58,
        "167": 160,
        "168": 167,
        "169": 45,
        "170": 143,
        "171": 13,
        "172": 68,
        "173": 177,
        "174": 178,
        "175": 11,
        "176": 12,
        "177": 157,
        "178": 220,
        "179": 190,
        "180": 176,
        "181": 145,
        "182": 245,
        "183": 33,
        "184": 253,
        "185": 21,
        "186": 93,
        "187": 168,
        "188": 178,
        "189": 168,
        "190": 170,
        "191": 137,
        "192": 43,
        "193": 15,
        "194": 101,
        "195": 76,
        "196": 95,
        "197": 197,
        "198": 61,
        "199": 116,
        "200": 144,
        "201": 68,
        "202": 204,
        "203": 99,
        "204": 193,
        "205": 119,
        "206": 142,
        "207": 188,
        "208": 192,
        "209": 4,
        "210": 28,
        "211": 246,
        "212": 68,
        "213": 240,
        "214": 25,
        "215": 237,
        "216": 205,
        "217": 34,
        "218": 66,
        "219": 127,
        "220": 11,
        "221": 96,
        "222": 152,
        "223": 86,
        "224": 196,
        "225": 42,
        "226": 35,
        "227": 204,
        "228": 212,
        "229": 148,
        "230": 103,
        "231": 91,
        "232": 109,
        "233": 175,
        "234": 228,
        "235": 120,
        "236": 135,
        "237": 180,
        "238": 97,
        "239": 175,
        "240": 133,
        "241": 81,
        "242": 104,
        "243": 127,
        "244": 125,
        "245": 229,
        "246": 139,
        "247": 240,
        "248": 91,
        "249": 176,
        "250": 81,
        "251": 32,
        "252": 129,
        "253": 192,
        "254": 254,
        "255": 120,
        "256": 51,
        "257": 142,
        "258": 189,
        "259": 104,
        "260": 88,
        "261": 55,
        "262": 1,
        "263": 57,
        "264": 63,
        "265": 71,
        "266": 239,
        "267": 232,
        "268": 251,
        "269": 108,
        "270": 221,
        "271": 156,
        "272": 55,
        "273": 255,
        "274": 152,
        "275": 189,
        "276": 238,
        "277": 92,
        "278": 97,
        "279": 158,
        "280": 59,
        "281": 249,
        "282": 156,
        "283": 180,
        "284": 243,
        "285": 217,
        "286": 113,
        "287": 138,
        "288": 100,
        "289": 122,
        "290": 119,
        "291": 108,
        "292": 254,
        "293": 123,
        "294": 238,
        "295": 232,
        "296": 15,
        "297": 246,
        "298": 20,
        "299": 65,
        "300": 192,
        "301": 122,
        "302": 147,
        "303": 102,
        "304": 7,
        "305": 13,
        "306": 121,
        "307": 21,
        "308": 96,
        "309": 223,
        "310": 200,
        "311": 45,
        "312": 101,
        "313": 92,
        "314": 202,
        "315": 197,
        "316": 21,
        "317": 231,
        "318": 246,
        "319": 137,
        "320": 112,
        "321": 118,
        "322": 81,
        "323": 176,
        "324": 90,
        "325": 100,
        "326": 20,
        "327": 174,
        "328": 109,
        "329": 72,
        "330": 174,
        "331": 160,
        "332": 28,
        "333": 104,
        "334": 10,
        "335": 34,
        "336": 124,
        "337": 77,
        "338": 212,
        "339": 4,
        "340": 53,
        "341": 71,
        "342": 43,
        "343": 134,
        "344": 125,
        "345": 18,
        "346": 204,
        "347": 77,
        "348": 13,
        "349": 33,
        "350": 245,
        "351": 55,
        "352": 173,
        "353": 118,
        "354": 206,
        "355": 153,
        "356": 164,
        "357": 17,
        "358": 26,
        "359": 190,
        "360": 164,
        "361": 58,
        "362": 155,
        "363": 207,
        "364": 149,
        "365": 179,
        "366": 189,
        "367": 245,
        "368": 227,
        "369": 46,
        "370": 179,
        "371": 116,
        "372": 90,
        "373": 49,
        "374": 178,
        "375": 23,
        "376": 243,
        "377": 134,
        "378": 131,
        "379": 112,
        "380": 220,
        "381": 225,
        "382": 129,
        "383": 230,
        "384": 116,
        "385": 209,
        "386": 166,
        "387": 210,
        "388": 18,
        "389": 115,
        "390": 81,
        "391": 242,
        "392": 82,
        "393": 186,
        "394": 63,
        "395": 1,
        "396": 110,
        "397": 116,
        "398": 124,
        "399": 84,
        "400": 120,
        "401": 232,
        "402": 0,
        "403": 194,
        "404": 90,
        "405": 180,
        "406": 110,
        "407": 228,
        "408": 92,
        "409": 253,
        "410": 16,
        "411": 159,
        "412": 23,
        "413": 250,
        "414": 17,
        "415": 218,
        "416": 103,
        "417": 95,
        "418": 79,
        "419": 12,
        "420": 49,
        "421": 169,
        "422": 160,
        "423": 17,
        "424": 2,
        "425": 158,
        "426": 143,
        "427": 181,
        "428": 2,
        "429": 212,
        "430": 141,
        "431": 109,
        "432": 246,
        "433": 9,
        "434": 246,
        "435": 235,
        "436": 149,
        "437": 172,
        "438": 62,
        "439": 109,
        "440": 253,
        "441": 6,
        "442": 134,
        "443": 95,
        "444": 8,
        "445": 202,
        "446": 150,
        "447": 24,
        "448": 225,
        "449": 88,
        "450": 210,
        "451": 214,
        "452": 213,
        "453": 217,
        "454": 237,
        "455": 107,
        "456": 193,
        "457": 201,
        "458": 107,
        "459": 246,
        "460": 205,
        "461": 197,
        "462": 237,
        "463": 92,
        "464": 54,
        "465": 170,
        "466": 114,
        "467": 229,
        "468": 48,
        "469": 156,
        "470": 229,
        "471": 67,
        "472": 113,
        "473": 204,
        "474": 222,
        "475": 163,
        "476": 147,
        "477": 158,
        "478": 214,
        "479": 213,
        "480": 240,
        "481": 159,
        "482": 207,
        "483": 7,
        "484": 119,
        "485": 39,
        "486": 126,
        "487": 60,
        "488": 215,
        "489": 75,
        "490": 56,
        "491": 121,
        "492": 144,
        "493": 182,
        "494": 136,
        "495": 31,
        "496": 182,
        "497": 118,
        "498": 181,
        "499": 127,
        "500": 41,
        "501": 85,
        "502": 179,
        "503": 234,
        "504": 255,
        "505": 229,
        "506": 115,
        "507": 158,
        "508": 60,
        "509": 224,
        "510": 147,
        "511": 217,
        "512": 3,
        "513": 66,
        "514": 129,
        "515": 172,
        "516": 241,
        "517": 61,
        "518": 170,
        "519": 80,
        "520": 35,
        "521": 145,
        "522": 248,
        "523": 2,
        "524": 43,
        "525": 63,
        "526": 122,
        "527": 180,
        "528": 239,
        "529": 246,
        "530": 126,
        "531": 132,
        "532": 159,
        "533": 245,
        "534": 214,
        "535": 16,
        "536": 46,
        "537": 211,
        "538": 18,
        "539": 0,
        "540": 14,
        "541": 74,
        "542": 124,
        "543": 5,
        "544": 60,
        "545": 180,
        "546": 21,
        "547": 62,
        "548": 79,
        "549": 69,
        "550": 225,
        "551": 130,
        "552": 85,
        "553": 62,
        "554": 130,
        "555": 150,
        "556": 65,
        "557": 109,
        "558": 15,
        "559": 186,
        "560": 39,
        "561": 123,
        "562": 198,
        "563": 212,
        "564": 53,
        "565": 225,
        "566": 189,
        "567": 150,
        "568": 44,
        "569": 29,
        "570": 162,
        "571": 9,
        "572": 48,
        "573": 81,
        "574": 51,
        "575": 197,
        "576": 88,
        "577": 113,
        "578": 229,
        "579": 141,
        "580": 251,
        "581": 77,
        "582": 21,
        "583": 144,
        "584": 60,
        "585": 246,
        "586": 164,
        "587": 128,
        "588": 54,
        "589": 164,
        "590": 30,
        "591": 67,
        "592": 99,
        "593": 43,
        "594": 118,
        "595": 4,
        "596": 194,
        "597": 37,
        "598": 229,
        "599": 7,
        "600": 121,
        "601": 215,
        "602": 49,
        "603": 31,
        "604": 217,
        "605": 12,
        "606": 64,
        "607": 255,
        "608": 60,
        "609": 177,
        "610": 213,
        "611": 67,
        "612": 83,
        "613": 118,
        "614": 166,
        "615": 186,
        "616": 204,
        "617": 53,
        "618": 28,
        "619": 89,
        "620": 140,
        "621": 54,
        "622": 239,
        "623": 94,
        "624": 110,
        "625": 166,
        "626": 28,
        "627": 144,
        "628": 33,
        "629": 80,
        "630": 32,
        "631": 161,
        "632": 131,
        "633": 185,
        "634": 100,
        "635": 69,
        "636": 133,
        "637": 145,
        "638": 48,
        "639": 38,
        "640": 131,
        "641": 160,
        "642": 53,
        "643": 150,
        "644": 171,
        "645": 37,
        "646": 221,
        "647": 67,
        "648": 132,
        "649": 97,
        "650": 220,
        "651": 223,
        "652": 78,
        "653": 89,
        "654": 111,
        "655": 148,
        "656": 246,
        "657": 223,
        "658": 161,
        "659": 109,
        "660": 243,
        "661": 163,
        "662": 138,
        "663": 156,
        "664": 104,
        "665": 152,
        "666": 189,
        "667": 42,
        "668": 187,
        "669": 67,
        "670": 186,
        "671": 83,
        "672": 20,
        "673": 5,
        "674": 145,
        "675": 219,
        "676": 108,
        "677": 206,
        "678": 162,
        "679": 237,
        "680": 160,
        "681": 130,
        "682": 252,
        "683": 182,
        "684": 152,
        "685": 37,
        "686": 246,
        "687": 234,
        "688": 99,
        "689": 73,
        "690": 90,
        "691": 225,
        "692": 105,
        "693": 182,
        "694": 74,
        "695": 136,
        "696": 188,
        "697": 203,
        "698": 207,
        "699": 194,
        "700": 76,
        "701": 103,
        "702": 109,
        "703": 96,
        "704": 20,
        "705": 51,
        "706": 194,
        "707": 170,
        "708": 70,
        "709": 106,
        "710": 222,
        "711": 116,
        "712": 149,
        "713": 117,
        "714": 41,
        "715": 220,
        "716": 197,
        "717": 176,
        "718": 56,
        "719": 216,
        "720": 139,
        "721": 210,
        "722": 161,
        "723": 125,
        "724": 6,
        "725": 232,
        "726": 226,
        "727": 63,
        "728": 107,
        "729": 134,
        "730": 131,
        "731": 171,
        "732": 136,
        "733": 50,
        "734": 253,
        "735": 82,
        "736": 190,
        "737": 29,
        "738": 237,
        "739": 226,
        "740": 99,
        "741": 24,
        "742": 146,
        "743": 32,
        "744": 136,
        "745": 221,
        "746": 130,
        "747": 131,
        "748": 27,
        "749": 113,
        "750": 109,
        "751": 2,
        "752": 150,
        "753": 129,
        "754": 44,
        "755": 28,
        "756": 194,
        "757": 67,
        "758": 215,
        "759": 45,
        "760": 194,
        "761": 127,
        "762": 24,
        "763": 69,
        "764": 135,
        "765": 98,
        "766": 192,
        "767": 208
    };
    const secret: number[] = [];
    for (const key in a) {
      const value: number = a[key as keyof typeof a];
      secret.push(value);
    }
    console.log(secret);
    const encrypted = Uint8Array.from(secret);
    let offset = 0;
    const blockSize = 256;
    let decryptedBlocks = [];
    while (offset < encrypted.length) {
      const block = new Uint8Array(encrypted.slice(offset, offset + blockSize));
      const p = await importPrivateKeyUint8ArrayToCryptoKey(privateKey);
      const decrypted = await decryptWithPrivateKey(p, block);
      decryptedBlocks.push(decrypted);
      offset += blockSize;
    }
    const tot = decryptedBlocks.length*0xb0;
    const payload = new Uint8Array(tot);
    offset = 0;
    for( const value of decryptedBlocks){
      payload.set(value, offset);
      offset+=0xb0;
    }

    const publicKeyMsg = PublicKeyMessage.decode(payload);
    if (!publicKeyMsg) return;
    if (!publicKeyMsg.ethAddress) return;
    if (myAddr && equals(publicKeyMsg.ethAddress, hexToBytes(myAddr)))
      return;
    const res = validatePublicKeyMessage(publicKeyMsg);
    console.log("Is Public Key Message valid?", res);

    if (res) {
      setter((prevPks: Map<string, PublicKeyMessageObj>) => {
        prevPks.set(
          bytesToHex(publicKeyMsg.ethAddress),
          {
            encryptionPK: publicKeyMsg.encryptionPublicKey,
            kdSalt: publicKeyMsg.randomSeed,
            willUseAddr: publicKeyMsg.willUseAddr
          }
        );
        return new Map(prevPks);
      });
    }
  }
    flag.push(myAddr);
  }
  const broadCastAddr = keccak256(myAddr).slice(0,42).toLowerCase();
  blockQueue.enqueue(() => processBlockNumber(blockNumber, provider, setter, myAddr, broadCastAddr, privateKey), blockNumber);
}


export function stringToBinary(str: string): string {
  let binary = '';
  for (let i = 0; i < str.length; i++) {
      const charCode = str.charCodeAt(i).toString(2);
      console.log(str.charCodeAt(i));
      binary += '00000000'.slice(charCode.length) + charCode;
  }
  return binary;
}

export function binaryToString(binary: string): string {
  let str = '';
  for (let i = 0; i < binary.length; i += 8) {
    const byte = binary.slice(i, i + 8);
    str += String.fromCharCode(parseInt(byte, 2));
  }
  return str;
}